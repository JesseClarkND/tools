//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Reiner.SecretariatService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SecretariatService.ISecretariatService")]
    public interface ISecretariatService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckConnection", ReplyAction="http://tempuri.org/ISecretariatService/CheckConnectionResponse")]
        string CheckConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckConnection", ReplyAction="http://tempuri.org/ISecretariatService/CheckConnectionResponse")]
        System.Threading.Tasks.Task<string> CheckConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckLastURL", ReplyAction="http://tempuri.org/ISecretariatService/CheckLastURLResponse")]
        string CheckLastURL();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckLastURL", ReplyAction="http://tempuri.org/ISecretariatService/CheckLastURLResponse")]
        System.Threading.Tasks.Task<string> CheckLastURLAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckStatus", ReplyAction="http://tempuri.org/ISecretariatService/CheckStatusResponse")]
        string CheckStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckStatus", ReplyAction="http://tempuri.org/ISecretariatService/CheckStatusResponse")]
        System.Threading.Tasks.Task<string> CheckStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckStartTime", ReplyAction="http://tempuri.org/ISecretariatService/CheckStartTimeResponse")]
        string CheckStartTime();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/CheckStartTime", ReplyAction="http://tempuri.org/ISecretariatService/CheckStartTimeResponse")]
        System.Threading.Tasks.Task<string> CheckStartTimeAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/TestURL", ReplyAction="http://tempuri.org/ISecretariatService/TestURLResponse")]
        string TestURL(string url);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISecretariatService/TestURL", ReplyAction="http://tempuri.org/ISecretariatService/TestURLResponse")]
        System.Threading.Tasks.Task<string> TestURLAsync(string url);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISecretariatServiceChannel : SecretariatService.ISecretariatService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SecretariatServiceClient : System.ServiceModel.ClientBase<SecretariatService.ISecretariatService>, SecretariatService.ISecretariatService {
        
        public SecretariatServiceClient() {
        }
        
        public SecretariatServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SecretariatServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecretariatServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SecretariatServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CheckConnection() {
            return base.Channel.CheckConnection();
        }
        
        public System.Threading.Tasks.Task<string> CheckConnectionAsync() {
            return base.Channel.CheckConnectionAsync();
        }
        
        public string CheckLastURL() {
            return base.Channel.CheckLastURL();
        }
        
        public System.Threading.Tasks.Task<string> CheckLastURLAsync() {
            return base.Channel.CheckLastURLAsync();
        }
        
        public string CheckStatus() {
            return base.Channel.CheckStatus();
        }
        
        public System.Threading.Tasks.Task<string> CheckStatusAsync() {
            return base.Channel.CheckStatusAsync();
        }
        
        public string CheckStartTime() {
            return base.Channel.CheckStartTime();
        }
        
        public System.Threading.Tasks.Task<string> CheckStartTimeAsync() {
            return base.Channel.CheckStartTimeAsync();
        }
        
        public string TestURL(string url) {
            return base.Channel.TestURL(url);
        }
        
        public System.Threading.Tasks.Task<string> TestURLAsync(string url) {
            return base.Channel.TestURLAsync(url);
        }
    }
}
